publishGenericEnvVariables: true
deploy:
  phases:
    install:
      commands:
        # Install terraform
        - TERRAFORM_VERSION=1.12.2
        - wget https://releases.hashicorp.com/terraform/"$TERRAFORM_VERSION"/terraform_"$TERRAFORM_VERSION"_linux_amd64.zip
        - unzip terraform_"$TERRAFORM_VERSION"_linux_amd64.zip
        - mv terraform /usr/local/bin/
        # Install helm
        - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        # Download helm charts
        - ./scripts/get_helm_charts.sh
    build:
      commands:
      - terraform init -backend-config="bucket=${SEEDFARMER_PARAMETER_TFSTATE_BUCKET_NAME}"
      - |
        if [ -n "$SEEDFARMER_PARAMETER_TRAINING_PLAN_ARN" ] ; then
          echo "create_hyperpod_module = false" >> custom.tfvars
        else
          echo "create_hyperpod_module = true" >> custom.tfvars
        fi
      - echo "availability_zone_id  = \"${SEEDFARMER_PARAMETER_AVAILABILITY_ZONE_ID}\"" >> custom.tfvars
      - terraform plan -var-file=custom.tfvars -out tf.plan
      - terraform apply tf.plan
      # Fetch terraform outputs
      - ./scripts/terraform_outputs.sh
      - cat terraform_outputs.json
      # Set env vairables for CreateCluster API call
      - HYPERPOD_CLUSTER_NAME=$SEEDFARMER_PARAMETER_HYPERPOD_CLUSTER_NAME
      - ACCEL_INSTANCE_TYPE=$SEEDFARMER_PARAMETER_ACCEL_INSTANCE_TYPE
      - ACCEL_COUNT=$SEEDFARMER_PARAMETER_ACCEL_COUNT
      - ACCEL_VOLUME_SIZE=$SEEDFARMER_PARAMETER_ACCEL_VOLUME_SIZE
      - TRAINING_PLAN_ARN=$SEEDFARMER_PARAMETER_TRAINING_PLAN_ARN
      - NODE_RECOVERY=$SEEDFARMER_PARAMETER_NODE_RECOVERY
      - EKS_CLUSTER_ARN=$(cat terraform_outputs.json | jq -r '.eks_cluster_arn.value')
      - SAGEMAKER_IAM_ROLE_ARN=$(cat terraform_outputs.json | jq -r '.sagemaker_iam_role_arn.value')
      - S3_BUCKET_NAME=$(cat terraform_outputs.json | jq -r '.s3_bucket_name.value')
      - SECURITY_GROUP_ID=$(cat terraform_outputs.json | jq -r '.security_group_id.value')
      - PRIVATE_SUBNET_ID=$(cat terraform_outputs.json | jq -r '.private_subnet_id.value')
      - env
      # Create cluster with a training plan via API (temporary while no IaC support for training plans)
      - |
        if [ -n "$SEEDFARMER_PARAMETER_TRAINING_PLAN_ARN" ] ; then
          ./scripts/create_cluster.sh || true
        fi
    post_build:
      commands:
      - echo "Deploy successful"
destroy:
  phases:
    install:
      commands:
        # Install terraform
        - TERRAFORM_VERSION=1.12.2
        - wget https://releases.hashicorp.com/terraform/"$TERRAFORM_VERSION"/terraform_"$TERRAFORM_VERSION"_linux_amd64.zip
        - unzip terraform_"$TERRAFORM_VERSION"_linux_amd64.zip
        - mv terraform /usr/local/bin/
        # Install helm
        - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        # Download helm charts
        - ./scripts/get_helm_charts.sh
    build:
      commands:
       # Delete cluster manually (temporary while no IaC support for training plans)
       - |
         if [ -n "$SEEDFARMER_PARAMETER_TRAINING_PLAN_ARN" ] ; then
           aws sagemaker delete-cluster --cluster-name ${SEEDFARMER_PARAMETER_HYPERPOD_CLUSTER_NAME} || true
           echo "create_hyperpod_module = false" >> custom.tfvars
         fi
       - sleep 120
       # Delete the rest of the infra
       - echo "availability_zone_id  = \"${SEEDFARMER_PARAMETER_AVAILABILITY_ZONE_ID}\"" >> custom.tfvars
       - terraform init -backend-config="bucket=${SEEDFARMER_PARAMETER_TFSTATE_BUCKET_NAME}"
       - terraform plan -destroy -var-file=custom.tfvars -out tf_destroy.plan
       - terraform apply tf_destroy.plan
    post_build:
      commands:
      - echo "Destroy successful"
build_type: BUILD_GENERAL1_SMALL